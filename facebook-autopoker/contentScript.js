// Generated by CoffeeScript 1.10.0
(function() {
  var AutoPokeSettings, LocalStorageValue, clicks, getRandomInt, observer, pokesContainer, setTimeout_, settings;

  console.log("Ready to poke back.");

  LocalStorageValue = (function() {
    function LocalStorageValue(name, defaultValue) {
      this.name = name;
      this.defaultValue = defaultValue;
      if (this.getValue() == null) {
        this.setValue(this.defaultValue);
      }
    }

    LocalStorageValue.prototype.getValue = function() {
      return localStorage.getItem(this.name);
    };

    LocalStorageValue.prototype.setValue = function(value) {
      return localStorage.setItem(this.name, value);
    };

    return LocalStorageValue;

  })();

  AutoPokeSettings = (function() {
    AutoPokeSettings.prototype.DEFAULT_AUTO_POKE = true;

    AutoPokeSettings.prototype.DEFAULT_MIN_DELAY = 5000;

    AutoPokeSettings.prototype.DEFAULT_MAX_DELAY = 60000;

    AutoPokeSettings.prototype.TEXTBOX_INVALID_STYLE = "border-color: red;";

    function AutoPokeSettings(autoInject) {
      if (autoInject == null) {
        autoInject = true;
      }

      /*
       * If autoInject is true, we'll automatically injectHTML()
       */
      this.autoPoke = new LocalStorageValue("fbap_autoPoke", this.DEFAULT_AUTO_POKE);
      this.minDelay = new LocalStorageValue("fbap_minDelay", this.DEFAULT_MIN_DELAY);
      this.maxDelay = new LocalStorageValue("fbap_maxDelay", this.DEFAULT_MAX_DELAY);
      this.buildSettingsDiv();
      this.addListeners();
      if (autoInject) {
        this.injectHTML();
      }
    }

    AutoPokeSettings.prototype.injectHTML = function() {
      var mainDiv;
      mainDiv = document.querySelector("#contentArea > div");
      return mainDiv.insertBefore(this.settingsDiv, mainDiv.firstChild);
    };

    AutoPokeSettings.prototype.cleanup = function() {
      return this.settingsDiv.remove();
    };

    AutoPokeSettings.prototype.buildSettingsDiv = function() {
      this.settingsDiv = document.createElement('div');
      this.settingsDiv.id = 'settingsDiv';
      this.settingsDiv.innerHTML = "<div class=\"_4-u2 _xct _4-u8\">\n    <div class='uiHeader'>\n        <h2 class=uiHeaderTitle>\n            Auto-Poker Settings\n        </h2>\n\n        <label>\n            <input type=checkbox id=autoPoke>\n            Auto-Poke\n        </label><br/><br/>\n\n        <label>\n            Min click delay (seconds): <input type=text id=minDelay>\n        </label><br/><br/>\n\n        <label>\n            Max click delay (seconds): <input type=text id=maxDelay>\n        </label><br/>\n    </div>\n</div>";
      this.autoPokeNode = this.settingsDiv.querySelector("#autoPoke");
      this.minDelayNode = this.settingsDiv.querySelector("#minDelay");
      this.maxDelayNode = this.settingsDiv.querySelector("#maxDelay");
      this.autoPokeNode.checked = this.autoPoke.getValue();
      this.minDelayNode.value = (this.minDelay.getValue() / 1000).toString();
      return this.maxDelayNode.value = (this.maxDelay.getValue() / 1000).toString();
    };

    AutoPokeSettings.prototype.addListeners = function() {
      this.autoPokeNode.addEventListener("click", (function(_this) {
        return function(mouseEvent) {
          _this.autoPoke.setValue(_this.autoPokeNode.checked);
          return console.log("autoPoke:", _this.autoPoke.getValue());
        };
      })(this));
      this.minDelayNode.addEventListener("input", (function(_this) {
        return function(event) {
          var input;
          input = (Number(_this.minDelayNode.value)) * 1000;
          if (isNaN(input)) {
            return _this.minDelayNode.style = _this.TEXTBOX_INVALID_STYLE;
          } else if (input > _this.maxDelay.getValue()) {
            return _this.maxDelayNode.style = _this.TEXTBOX_INVALID_STYLE;
          } else {
            _this.maxDelayNode.style = "";
            _this.minDelayNode.style = "";
            _this.minDelay.setValue(input);
            return console.log("minDelay:", _this.minDelay.getValue());
          }
        };
      })(this));
      return this.maxDelayNode.addEventListener("input", (function(_this) {
        return function(event) {
          var input;
          input = (Number(_this.maxDelayNode.value)) * 1000;
          if (isNaN(input)) {
            return _this.maxDelayNode.style = _this.TEXTBOX_INVALID_STYLE;
          } else if (input < _this.minDelay.getValue()) {
            return _this.minDelayNode.style = _this.TEXTBOX_INVALID_STYLE;
          } else {
            _this.maxDelayNode.style = "";
            _this.minDelayNode.style = "";
            _this.maxDelay.setValue(input);
            return console.log("maxDelay:", _this.maxDelay.getValue());
          }
        };
      })(this));
    };

    return AutoPokeSettings;

  })();

  setTimeout_ = function(time, f) {
    return setTimeout(f, time);
  };

  getRandomInt = function(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  clicks = 0;

  settings = new AutoPokeSettings();

  observer = new MutationObserver(function(mutationRecords, mutationObserver) {
    var button, i, len, node, record, results, waitTime;
    if (settings.autoPoke.getValue()) {
      results = [];
      for (i = 0, len = mutationRecords.length; i < len; i++) {
        record = mutationRecords[i];
        results.push((function() {
          var j, len1, ref, ref1, results1;
          ref = record.addedNodes;
          results1 = [];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            node = ref[j];
            if ((ref1 = node.id) != null ? ref1.startsWith('poke_live_item_') : void 0) {
              console.groupCollapsed("Found pokable person.");
              button = node.querySelector('a[ajaxify^="/pokes/inline/?"]:not([title])');
              console.log("node:", node);
              console.log("button:", button);
              waitTime = getRandomInt(settings.minDelay.getValue(), settings.maxDelay.getValue());
              console.log("waiting " + (waitTime / 1000) + " seconds.");
              results1.push(setTimeout_(waitTime, function() {
                clicks++;
                console.log("click number:", clicks);
                button.click();
                return console.groupEnd();
              }));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
      return results;
    }
  });

  pokesContainer = document.querySelector('#poke_live_new').parentElement;

  observer.observe(pokesContainer, {
    childList: true,
    subtree: true
  });

}).call(this);
